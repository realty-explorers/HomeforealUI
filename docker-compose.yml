version: "3.9"
services:
  rabbit:
    image: "rabbitmq:management-alpine"
    ports:
      - "5672:5672"
      - "15672:15672"
  deals:
    image: "ghcr.io/sharonfabin/deals-service"
    ports:
      - "9001:9001"
    env_file:
      - deals.env
    volumes:
      - letsencrypt_conf:/etc/nginx/ssl/:ro
      - elastic_certs:/etc/elastic/certs/:ro
  ui:
    image: "ghcr.io/sharonfabin/ui"
    ports:
      - "3000:3000"
    env_file:
      - ui.env
  elastic_setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Good to go!";
      '
    volumes:
      - elastic_certs:/usr/share/elasticsearch/config/certs
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
  es01:
    depends_on:
      elastic_setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    ports:
      - "9200:9200"
      - "9300:9300"
    #env_file:
    #  - elastic.env
    #restart: unless-stopped
    volumes:
      - es01_data:/usr/share/elasticsearch/data
      - elastic_certs:/usr/share/elasticsearch/config/certs
    environment:
      - node.name=es01
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      # - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: 1g
  kibana:
    depends_on:
      - es01
    image: "docker.elastic.co/kibana/kibana:8.6.2"
    volumes:
      - elastic_certs:/usr/share/kibana/config/certs
      - kibana_data:/usr/share/kibana/data
    ports:
      - 5601:5601
    env_file:
      - kibana.env
  nginx:
    image: "nginx:latest"
    ports:
      - "80:80"
      - "443:443"
    restart: always
    volumes:
      - ./nginx/conf/:/etc/nginx/conf.d:ro
      - letsencrypt_www:/var/www/certbot/:ro
      - letsencrypt_conf:/etc/nginx/ssl/:ro
  certbot:
    image: certbot/certbot:latest
    command: certonly --webroot --preferred-challenges http-01 --server https://acme-v02.api.letsencrypt.org/directory --agree-tos --renew-by-default --text --email i.sharon.fabin@gmail.com --webroot-path=/var/www/certbot/ -d homeforeal.com
    volumes:
      - letsencrypt_www:/var/www/certbot/:rw
      - letsencrypt_conf:/etc/letsencrypt/:rw
  nginx_letsencrypt:
    image: "ghcr.io/sharonfabin/nginx-letsencrypt"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt_www:/var/www/certbot/:ro
      - letsencrypt_conf:/etc/nginx/ssl/:ro
volumes:
  letsencrypt_www:
    driver: local
  letsencrypt_conf:
    driver: local
  elastic_certs:
    driver: local
  es01_data:
    driver: local
  kibana_data:
    driver: local
